#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('vispeechui:server');
var http = require('http');
var { Kafka, logLevel } = require('kafkajs');

const host = 'asr.vietspeech.com'
const kafka = new Kafka({
  logLevel: logLevel.INFO,
  brokers: [`${host}:9092`],
  clientId: 'vispeech',
})


/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3200');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var topics = require('../kafka/event').TOPICS;
var io = require('socket.io').listen(server);
var consumerUtil = require('../kafka/consumer');
app.set('socket', io);

io.sockets.on('connection', function (socket) {
  const consumer = kafka.consumer({ groupId: socket.id })

  console.log('Socket connected');
  socket.emit('CONNECTED', "Connect socket success");
  // USER
  socket.on(topics.USER_CREATED_SUCCESS_EVENT, () => {
    consumerUtil.run(consumer, topics.USER_CREATED_SUCCESS_EVENT, socket);
  })
  socket.on(topics.USER_CREATED_FAILED_EVENT, () => {
    consumerUtil.run(consumer, topics.USER_CREATED_FAILED_EVENT, socket);
  })
  socket.on(topics.USER_DELETED_SUCCESS_EVENT, () => {
    consumerUtil.run(consumer, topics.USER_DELETED_SUCCESS_EVENT, socket);
  })
  socket.on(topics.USER_DELETED_SUCCESS_EVENT, () => {
    consumerUtil.run(consumer, topics.USER_DELETED_SUCCESS_EVENT, socket);
  })
  socket.on(topics.USER_UPDATED_SUCCESS_EVENT, () => {
    consumerUtil.run(consumer, topics.USER_UPDATED_SUCCESS_EVENT, socket);
  })
  socket.on(topics.USER_UPDATED_FAILED_EVENT, () => {
    consumerUtil.run(consumer, topics.USER_UPDATED_FAILED_EVENT, socket);
  })
  socket.on(topics.VERIFY_EMAIL_SENT_SUCCESS_EVENT, () => {
    consumerUtil.run(consumer, topics.VERIFY_EMAIL_SENT_SUCCESS_EVENT, socket);
  })
  socket.on(topics.VERIFY_EMAIL_SENT_FAILED_EVENT, () => {
    consumerUtil.run(consumer, topics.VERIFY_EMAIL_SENT_FAILED_EVENT, socket);
  })
  socket.on(topics.EMAIL_VERIFIED_SUCCESS_EVENT, () => {
    consumerUtil.run(consumer, topics.EMAIL_VERIFIED_SUCCESS_EVENT, socket);
  })
  socket.on(topics.EMAIL_VERIFIED_FAILED_EVENT, () => {
    consumerUtil.run(consumer, topics.EMAIL_VERIFIED_FAILED_EVENT, socket);
  })
  // TOKEN
  socket.on(topics.FREE_TOKEN_CREATED_SUCCESS_EVENT, () => {
    consumerUtil.run(consumer, topics.FREE_TOKEN_CREATED_SUCCESS_EVENT);
  })
  socket.on(topics.FREE_TOKEN_CREATED_FAILED_EVENT, () => {
    consumerUtil.run(consumer, topics.FREE_TOKEN_CREATED_FAILED_EVENT);
  })
  socket.on(topics.TOKEN_CREATED_SUCCESS_EVENT, () => {
    consumerUtil.run(consumer, topics.TOKEN_CREATED_SUCCESS_EVENT);
  })
  socket.on(topics.TOKEN_CREATED_FAILED_EVENT, () => {
    consumerUtil.run(consumer, topics.TOKEN_CREATED_FAILED_EVENT);
  })
  socket.on(topics.TOKEN_DELETED_SUCCESS_EVENT, () => {
    consumerUtil.run(consumer, topics.TOKEN_DELETED_SUCCESS_EVENT);
  })
  socket.on(topics.TOKEN_DELETED_FAILED_EVENT, () => {
    consumerUtil.run(consumer, topics.TOKEN_DELETED_FAILED_EVENT);
  })
  socket.on(topics.PASSWORD_CHANGED_SUCCESS_EVENT, () => {
    consumerUtil.run(consumer, topics.PASSWORD_CHANGED_SUCCESS_EVENT, socket);
  })
  socket.on(topics.PASSWORD_CHANGED_FAILED_EVENT, () => {
    consumerUtil.run(consumer, topics.PASSWORD_CHANGED_FAILED_EVENT, socket);
  })
  // ORDER
  socket.on(topics.ORDERED_TOKEN_CREATED_SUCCESS_EVENT, () => {
    consumerUtil.run(consumer, topics.ORDERED_TOKEN_CREATED_SUCCESS_EVENT, socket);
  })
  socket.on(topics.ORDERED_TOKEN_CREATED_FAILED_EVENT, () => {
    consumerUtil.run(consumer, topics.ORDERED_TOKEN_CREATED_FAILED_EVENT, socket);
  })
  socket.on(topics.ORDER_CREATED_SUCCESS_EVENT, () => {
    consumerUtil.run(consumer, topics.ORDER_CREATED_SUCCESS_EVENT, socket);
  })
  socket.on(topics.ORDER_CREATED_FAILED_EVENT, () => {
    consumerUtil.run(consumer, topics.ORDER_CREATED_FAILED_EVENT, socket);
  })
  // PROJECT
  socket.on(topics.PROJECT_CREATED_SUCCESS_EVENT, () => {
    consumerUtil.run(consumer, topics.PROJECT_CREATED_SUCCESS_EVENT, socket);
  })
  socket.on(topics.PROJECT_CREATED_FAILED_EVENT, () => {
    consumerUtil.run(consumer, topics.PROJECT_CREATED_FAILED_EVENT, socket);
  })
  // PERMISSION
  socket.on(topics.PERMISSION_CREATED_SUCCESS_EVENT, () => {
    consumerUtil.run(consumer, topics.PERMISSION_CREATED_SUCCESS_EVENT, socket);
  })
  socket.on(topics.PERMISSION_CREATED_FAILED_EVENT, () => {
    consumerUtil.run(consumer, topics.PERMISSION_CREATED_FAILED_EVENT, socket);
  })
  socket.on(topics.PERMISSION_ASSIGN_EMAIL_SENT_SUCCESS_EVENT, () => {
    consumerUtil.run(consumer, topics.PERMISSION_ASSIGN_EMAIL_SENT_SUCCESS_EVENT, socket);
  })
  socket.on(topics.PERMISSION_ASSIGN_EMAIL_SENT_FAILED_EVENT, () => {
    consumerUtil.run(consumer, topics.PERMISSION_ASSIGN_EMAIL_SENT_FAILED_EVENT, socket);
  })

  socket.on('disconnect', async function () {
    console.log('Socket disconnect!');
    await consumer.disconnect();
    socket.emit('DISCONNECTED', 'Connected socket disconnected');
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
